node('master') {
    checkout scm
    // Load the file 'pipelineTrace.groovy' from the current directory, into a variable called "externalMethod".
    def trace = load("pipelineTrace.groovy")
    def logs = load("logFile.groovy")

//	def config = load("loadConfig.groovy")

    def WORKSPACE = "${env.WORKSPACE}"

//    def myEnv = config.loadConfig()
//	echo "ArtifactFolder== ${myEnv.ArtifactFolder}"           

    trace.startStage(WORKSPACE, "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Pipeline')

    def nugent = load("_nugent")

    stage('Build') {
        trace.startStage(WORKSPACE, "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'BUILD')

        try {

            nugent.executeMSBuild('${Package_type}')

            def logstash = load("_logstash")
            logstash.copyLogFiles()
        }
        catch (err) {
            throw err
        }
        finally {
            trace.endStage(WORKSPACE, "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'BUILD')
        }
    }

    stage('Code Coverage') {
        trace.startStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Code Coverage')
        try {
            if ("${env.MS_TEST}" == "") {
                def message = "No test location identified in PAC.json"
                echo $ { message }
                trace.output("${env.WORKSPACE}", "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", "${message}")
            } else {
                def coverage = load("_codeCoverage")
                coverage.runCodeCoverage()
            }
        } catch (err) {
            logs.copyLogFile('%LOG_FOLDER%', '%SRC_LOG%')
            logs.copyLogFile('%LOG_FOLDER%', '%GIT_LOG%')
            throw err
        }

        trace.endStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Code Coverage')
    }

    stage('Code Analysis') {
        trace.startStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Code Analysis')

        try {
            echo "${env.UUID}"
            if ("${env.MS_TEST}" == "") {
                def message = "No test location identified in PAC.json"
                echo $ { message }
                trace.output("${env.WORKSPACE}", "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", "${message}")
            } else {
                def analysis = load("_codeAnalysis")
                analysis.runCodeAnalysis()

                //Code Analysis logs to move to LogStash folder
//            bat '"%powershell%" -ExecutionPolicy ByPass -File "${env.WORKSPACE}/scripts/checkDirectory.ps1" -DIRECTORY %LOG_FOLDER_CA%'
                logs.copyLogFile('%LOG_FOLDER_CA%', '%SRC_FXCOP%')
            }
        } catch (err) {
            logs.copyLogFile('%LOG_FOLDER_CA%', '%SRC_FXCOP%')
            logs.copyLogFile('%LOG_FOLDER%', '%SRC_LOG%')
            logs.copyLogFile('%LOG_FOLDER%', '%GIT_LOG%')
            throw err
        }

        trace.endStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}", "${env.GIT_BRANCH}", 'Code Analysis')
    }

    stage('Install Package') {
        trace.startStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Install Package')

    try {
        echo "${env.UUID}"

        def analysis = load("_installArtifact")
        analysis.installArtifact()


   } catch (err) {
//        bat '"%powershell%" -ExecutionPolicy ByPass -File "${env.WORKSPACE}/scripts/checkDirectory.ps1" -DIRECTORY %LOG_FOLDER_CA%'
            logs.copyLogFile('%LOG_FOLDER_CA%', '%SRC_FXCOP%')
            logs.copyLogFile('%LOG_FOLDER%', '%SRC_LOG%')
            logs.copyLogFile('%LOG_FOLDER%', '%GIT_LOG%')
        throw err
    }

        trace.endStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Install Package')
    }

    stage('Artifact Upload') {
        trace.startStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Artifact Upload')

        def artifactUpload = load("_artifactUpload")
        artifactUpload.runArtifactUpload()

        trace.endStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Artifact Upload')
    }

    stage('Deployment to DEV') {
        trace.startStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Deployment to DEV')
        trace.endStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Deployment to DEV')
    }

    stage('Deployment to TEST') {
        trace.startStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Deployment to TEST')
        trace.endStage("${env.WORKSPACE}", "${env.BUILD_NUMBER}",  "${env.GIT_BRANCH}", 'Deployment to TEST')
    }
}

def clean() {
    bat '"%powershell%" -ExecutionPolicy ByPass -File %delete_folder% -DIRECTORY %ARTIFACT_PATH%'
    bat '"%powershell%" -ExecutionPolicy ByPass -File %delete_folder% -DIRECTORY %PACKAGE_PATH%'
}

